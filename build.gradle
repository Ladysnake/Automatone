/*
 * This file is part of Baritone.
 *
 * Baritone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Baritone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Baritone.  If not, see <https://www.gnu.org/licenses/>.
 */


import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'org.quiltmc.loom' version '1.4.+'
    id 'io.github.ladysnake.chenille' version "0.11.3"
}

group project.maven_group
version project.mod_version

chenille {
    configurePublishing {
        withArtifactory()
        withGithubRelease()
    }
    configureTestmod {
        withBaseTestRuns()
        withDependencyConfiguration()
    }

    javaVersion = 17
}

compileJava {
    options.encoding = "UTF-8" // allow emoji in comments :^)
}


sourceSets {
    api {
        compileClasspath += main.compileClasspath
    }
    main {
        compileClasspath += api.output
    }
    test {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }
    launch {
        compileClasspath += main.compileClasspath + main.runtimeClasspath + main.output
        runtimeClasspath += main.compileClasspath + main.runtimeClasspath + main.output
    }
    testmod {
        compileClasspath += launch.compileClasspath + launch.runtimeClasspath + launch.output
        runtimeClasspath += launch.compileClasspath + launch.runtimeClasspath + launch.output
    }

    schematica_api {
        compileClasspath += main.compileClasspath
    }

    main {
        compileClasspath += schematica_api.output
    }
}

repositories {
    mavenCentral()

    chenille.repositories {
        ladysnake()
        jamieswhiteshirt()
    }

    maven {
        name = 'Quilt Snapshots'
        url = 'https://maven.quiltmc.org/repository/snapshot'
    }

    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
    modImplementation "org.quiltmc:quilt-loader:${project.quilt_loader_version}"

    modImplementation "org.quiltmc:qsl:${qsl_version}+${minecraft_version}"
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${quilted_fabric_api_version}-${minecraft_version}"
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") {
        transitive = false
    }
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") {
        transitive = false
    }
    modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cca_version}") {
        transitive = false
    }
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${reach_version}") {
        transitive = false
    }
    modLocalImplementation("io.github.ladysnake:elmendorf:${elmendorf_version}") {
        transitive = false
    }
    compileOnly "com.demonwav.mcdev:annotations:1.0"

    testImplementation 'junit:junit:4.12'
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName.set('Otomaton')
    archiveClassifier.set('dev')
    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName.set('Otomaton')
    inputFile.set(testmodJar.archiveFile)
    addNestedDependencies.set(false)
}

processLaunchResources {
    inputs.property "version", project.version
    filesMatching('quilt.mod.json') {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
}

javadoc {
    options.addStringOption('Xwerror', '-quiet') // makes the build fail on travis when there is a javadoc error
    options.linkSource true
    options.encoding "UTF-8" // allow emoji in comments :^)
    source = sourceSets.api.allJava
    classpath += sourceSets.api.compileClasspath
}

jar {
    from sourceSets.launch.output, sourceSets.api.output

    preserveFileTimestamps = false
    reproducibleFileOrder = true

    manifest {
        attributes(
                'MixinConfigs': 'mixins.automatone.json',

                'Implementation-Title': 'Automatone',
                'Implementation-Version': project.version
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = project.mod_name
                licenses {
                    license {
                        name = 'GNU Lesser General Public License 3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }
            }
        }
    }
}
